import express, { NextFunction, Request, Response } from 'express';
import cors from 'cors';
import db from './db';
import { AuthenticatedRequest, authenticatedTeacher, authenticateJWT, createToken } from './auth';
import fs from 'fs/promises';


const port = process.env.PORT || 5000;

const error_handler = (err: Error, _req: Request, res: Response, _next: NextFunction) => {
    console.log(err);
    res.status(500).send('oopsie')
}

express()
    .use(cors())
    .use(express.json())
    .get('/', (_req, res) => res.send('hello world'))
    .post('/login', async (req, res) => {
        try {
            const { student_number, password }: { student_number: string, password: string } = req.body;

            let row = await db.get(`SELECT password FROM users WHERE username = '${student_number}'`);

            if (row !== undefined && row.password !== password) {
                res.sendStatus(403);
            } else {
                res.status(200).send({ ...await createToken(student_number) });
            }
        } catch (e) {
            console.log(e);
            res.sendStatus(500)
        }
    })
    .get('/cadeira', authenticateJWT, async (req, res) => {
        try {
            const row = await db.all(`SELECT DISTINCT course FROM teachers
                                 WHERE course LIKE '%${req.query.search}%'`);
            res.status(200).send(row)
        } catch (e) {
            console.log(e);
            res.sendStatus(500)
        }
    })
    .get('/cadeira/all', authenticatedTeacher, async (req, res) => {
        try {
            const auth = (req as AuthenticatedRequest).auth;
            const row: { course: string }[] = await db.all(
                'SELECT course FROM teachers WHERE username = ?',
                [auth.username]
            );
            res.status(200).send(row.map(x => x.course));
        } catch (e) {
            console.log(e);
            res.sendStatus(500);
        }
    })
    .get('/cadeira/:name/tests', authenticateJWT, async (req, res) => {
        try {
            type DbTest = { test_number: number, question_number: number, statement: string };

            const tests: DbTest[] = await db.all(
                `SELECT test_number, question_number, statement FROM tests WHERE course = ?`,
                [req.params.name],
            );
            const response = {} as any;
            for (const t of tests) {
                let exam = response[t.test_number];
                if (exam === undefined) {
                    exam = {} as any;
                    response[t.test_number] = exam;
                }
                exam[t.question_number] = t.statement;
            }
            res.status(200).send(response);
        } catch (e) {
            console.log(e);
            res.sendStatus(500);
        }
    })
    .get('/cadeira/:name/test-answers', authenticatedTeacher, async (req, res) => {
        try {
            type DbTest = {
                test_number: number,
                question_number: number,
                statement: string,
                answer: string,
            };

            const course = req.params.name;
            const tests: DbTest[] = await db.all(
                `SELECT test_number, question_number, statement, answer FROM tests WHERE course = ?`,
                [course],
            );
            const response = {} as any;
            const is_flag = (t: DbTest) => course === 'AlgC' &&
                t.test_number === 1 &&
                t.question_number === 4;

            for (const t of tests) {
                let exam = response[t.test_number];
                if (exam === undefined) {
                    exam = {} as any;
                    response[t.test_number] = exam;
                }
                exam[t.question_number] = {
                    statement: t.statement,
                    answer: is_flag(t)
                        ? (await fs.readFile('flag')).toString('utf8').trim()
                        : t.answer,
                };
            }
            res.status(200).send(response);
        } catch (e) {
            console.log(e);
            res.sendStatus(500);
        }
    })
    .use(error_handler)
    .listen(port, () => console.log('server running on port', port));
