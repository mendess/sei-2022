import { useState } from 'react';
import './App.css';
import { Login } from './components/login';
import { Student } from './components/student';
import { Teacher } from './components/teacher';
import axios from 'axios';
import config from './config';
import { Disclaimer } from './components/disclaimer';

export type User = {
    student_number: string,
    password: string,
}

export type Session = {
    kind: 'teacher' | 'student',
    jwt: string,
    student_number: string,
}

type LoginData = {
    token: string,
    expiresIn: number,
    is_teacher: boolean,
}

const loadFromStorage = (): Session | undefined => {
    try {
        const jwt = localStorage.getItem('jwt');
        const kind = localStorage.getItem('kind');
        const student_number = localStorage.getItem('student_number');
        return (jwt && (kind === 'teacher' || kind === 'student') && student_number)
            ? { jwt, kind, student_number }
            : undefined
    } catch (e) {
        console.log(e)
        return
    }
}

function App() {
    const [session, setSession] = useState<Session | undefined>(loadFromStorage());
    const [error, setError] = useState<string | undefined>(undefined);

    const storeSession = (s: Session) => {
        localStorage.setItem('kind', s.kind);
        localStorage.setItem('jwt', s.jwt);
        localStorage.setItem('student_number', s.student_number);
        setSession(s)
    }

    const login = async (user: User) => {
        try {
            const res = await axios.post(`${config.baseUrl}/login`, { ...user });
            const session_data = res.data as LoginData;
            storeSession({
                kind: session_data.is_teacher ? 'teacher' : 'student',
                student_number: user.student_number,
                jwt: session_data.token,
            })
        } catch (e) {
            setError('Credenciais Invalidas');
        }
    };

    const logout = () => {
        localStorage.clear();
        setSession(undefined);
    }

    return (
        <div>
            {
                session?.kind !== undefined
                    ? (<button className="logout" onClick={logout}>logout</button>)
                    : <></>
            }
            <div>
                {(() => {
                    switch (session?.kind) {
                        case undefined:
                            return (<Login login={login} error={error} />)
                        case 'teacher':
                            return (<Teacher user={session} logout={logout} />);
                        case 'student':
                            return (<Student user={session} logout={logout} />);
                    }
                })()}
            </div>
            {session?.kind === undefined ? <Disclaimer /> : <></>}
        </div>
    );
}

export default App;

